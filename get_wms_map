#!/usr/bin/python

from wms_get_map import *
import argparse
import logging as log

def parse_arguments(parser):
    ####################
    # location
    ####################
    location_group = parser.add_argument_group("location")
    location_group.add_argument("x", type=str, help="x coordinate", nargs="?")
    location_group.add_argument("y", type=str, help="y coordinate", nargs="?")
    location_group.add_argument("-a", "--address", type=str, help="address to geocode. overrides coordinates")

    location_group.add_argument("-A", "--geo", type=str, help="geocoder system",
            default="google")
    location_group.add_argument("--wgs-84", action="store_true",
            help="x and y are WGS84 coordinates", default=False)
    location_group.add_argument("--tm35fin", action="store_true",
            help="x and y are ETRS-TM35FIN coordinates", default=True)
    location_group.add_argument("--kkj", action="store_true",
            help="x and y are KKJ coordinates", default=False)
    location_group.add_argument("--srs", type=str,
            help="SRS to use as input coordinate system", default="")

    #####################
    # input
    #####################
    input_group = parser.add_argument_group("input")
    input_group.add_argument("--corner",
            help="given coordinate or address is in lower left corner", action="store_true")
    input_group.add_argument("--size-input",  type=str, help="input size(meters)",
            metavar="widthxheight", default="4000x4000")

    input_group.add_argument("--scale", type=int, help="scale(1 px : N meters). overrides input size",
            metavar="N", default=0)

    input_group.add_argument("--layer", type=str,
            default="peruskartta")
    input_group.add_argument("--service", type=str,
            default="peruskartta?")
    input_group.add_argument("--url", type=str,
            default="http://tiles.kartat.kapsi.fi/")
    #TODO: add argument to select WMS query SRS

    #####################
    # output
    ####################
    output_group = parser.add_argument_group("output")
    output_group.add_argument("--size-output", type=str, help="output size(pixels)",
            metavar="widthxheight", default="4000x4000")

    output_group.add_argument("-O", "--output", type=str, help="output file")

    #################
    # verbose
    #################
    misc_group = parser.add_argument_group("misc")
    misc_group.add_argument("-v", "--verbose",
            help="increase output verbosity", action="count", default=0)
    misc_group.add_argument("--dryrun", action="count", default=0,
            help="do not download map")

    return parser.parse_args()


def main():
    parser = argparse.ArgumentParser()
    args = parse_arguments(parser)

    init_logger(args.verbose)

    log.debug(args)

    check_packages()
    check_arguments(args)

    if args.address != None and can_use_geocoder():
        wgs84_coordinates = get_coordinates(args.geo, args.address)
        tm35_coordinates = wgs84_to_tm35(wgs84_coordinates)
    elif args.address != None and not can_use_geocoder():
        log.error("Trying to use geocoder but geopy or pyproj is disabled")
        sys.exit()
    else:
        tm35_coordinates = use_given_coordinates(args)

    if args.scale > 0:
        args.size_input[0] = args.size_output[0] * args.scale
        args.size_input[1] = args.size_output[1] * args.scale

    if not args.corner:
        tm35_coordinates[0] -= args.size_input[0]/2
        tm35_coordinates[1] -= args.size_input[1]/2

    log.debug(args)

    if args.dryrun:
        log.error("Dryrun. Exiting...")
        sys.exit()

    log.info("ETRS-TM35FIN: " + str(tm35_coordinates))
    wms = owslib.wms.WebMapService(args.url + args.service)

    if args.size_output[0] <= 4096 and args.size_output[1] <= 4096:
        #fetch one tile
        img = fetch_tile(wms, tm35_coordinates, args.size_input, args.size_output, args.layer)
    else:
        #loop and fetch tiles
        raise(NotImplementedError)

    if args.output != None:
        out = open(args.output, "wb")
        out.write(img.read())
        out.close()

if __name__ == "__main__":
    main()
